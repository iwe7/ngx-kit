#!/usr/bin/env node
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
'use strict';

/**
 * This file is useful for not having to load bootstrap-local in various javascript.
 * Simply use package.json to have npm scripts that use this script as well, or use
 * this script directly.
 */
require('../lib/bootstrap-local');


const {bold, gray, red, yellow, white} = require('chalk');
const minimist = require('minimist');
const fs = require('fs');
const path = require('path');

const args = minimist(process.argv.slice(2), {
  boolean: ['verbose']
});
const scriptName = args._.shift();
const scriptPath = path.join('../scripts', scriptName);

process.chdir(path.join(__dirname, '..'));


// This might get awkward, so we fallback to console if there was an error.
let logger = null;
try {
  logger = new (require('@angular-devkit/core').IndentLogger)('root');
  require('rxjs/add/operator/filter');

  logger
    .filter(entry => (entry.level !== 'debug' || args.verbose))
    .subscribe(entry => {
      let color = gray;
      let output = process.stdout;
      switch (entry.level) {
        case 'info': color = white; break;
        case 'warn': color = yellow; break;
        case 'error': color = red; output = process.stderr; break;
        case 'fatal': color = x => bold(red(x)); output = process.stderr; break;
      }

      output.write(color(entry.message) + '\n');
    });

  logger
    .filter(entry => entry.level === 'fatal')
    .subscribe(() => {
      process.stderr.write('A fatal error happened. See details above.\n');
      process.exit(100);
    });
} catch (e) {
  console.error(red(`Reverting to manual console logging.\nReason: ${e.message}.`));
  logger = {
    debug: console.log.bind(console),
    info: console.log.bind(console),
    warn: console.warn.bind(console),
    error: console.error.bind(console),
    fatal: x => { console.error(x); process.exit(100); },
  };
}


try {
  require(scriptPath).default(args, logger);
} catch (err) {
  logger.fatal(err.toString());
}


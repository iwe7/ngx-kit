[{"file":"content/compiled/undefined.json","meta":{},"body":"[{\"file\":\"content/compiled/undefined.json\",\"meta\":{},\"body\":\"[{\\\"file\\\":\\\"content/compiled/undefined.json\\\",\\\"meta\\\":{},\\\"body\\\":\\\"[{\\\\\\\"file\\\\\\\":\\\\\\\"content/compiled/undefined.json\\\\\\\",\\\\\\\"meta\\\\\\\":{},\\\\\\\"body\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/compiled/kit/getting-started.json\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content/kit/getting-started.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kit/getting-started\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Getting Started\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nStarted text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```typescript\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@Injectable()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  constructor(private http: Http,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const data = route.data;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if (data['content']) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          .map(res => res.text())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          .map(body => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            console.log('postBody', body);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      alert(404);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}]\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/compiled/kit/overview.json\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content/kit/overview.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kit/overview\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Overview\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Overview\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nIntro text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```typescript\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@Injectable()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  constructor(private http: Http,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const data = route.data;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if (data['content']) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          .map(res => res.text())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          .map(body => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            console.log('postBody', body);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      alert(404);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}]\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/compiled/kit/buttons/button.json\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content/kit/buttons/button/button.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Button\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content/kit/buttons/button/demo-main.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"demo-main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Default Button\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content/kit/buttons/button/demo-types.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"demo-type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Button Types\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}]\\\\\\\\\\\\\\\"}]\\\\\\\"},{\\\\\\\"file\\\\\\\":\\\\\\\"content/compiled/kit/getting-started.json\\\\\\\",\\\\\\\"meta\\\\\\\":{},\\\\\\\"body\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/kit/getting-started.md\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"kit/getting-started\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Getting Started\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nStarted text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```typescript\\\\\\\\\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n@Injectable()\\\\\\\\\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  constructor(private http: Http,\\\\\\\\\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\\\\\\\\\n    const data = route.data;\\\\\\\\\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\\\\\\\\\n    if (data['content']) {\\\\\\\\\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\\\\\\\\\n          .map(res => res.text())\\\\\\\\\\\\\\\\n          .map(body => {\\\\\\\\\\\\\\\\n            console.log('postBody', body);\\\\\\\\\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\\\\\\\\\n          });\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      alert(404);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]\\\\\\\"},{\\\\\\\"file\\\\\\\":\\\\\\\"content/compiled/kit/overview.json\\\\\\\",\\\\\\\"meta\\\\\\\":{},\\\\\\\"body\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/kit/overview.md\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"kit/overview\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Overview\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nIntro text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```typescript\\\\\\\\\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n@Injectable()\\\\\\\\\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  constructor(private http: Http,\\\\\\\\\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\\\\\\\\\n    const data = route.data;\\\\\\\\\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\\\\\\\\\n    if (data['content']) {\\\\\\\\\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\\\\\\\\\n          .map(res => res.text())\\\\\\\\\\\\\\\\n          .map(body => {\\\\\\\\\\\\\\\\n            console.log('postBody', body);\\\\\\\\\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\\\\\\\\\n          });\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      alert(404);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]\\\\\\\"},{\\\\\\\"file\\\\\\\":\\\\\\\"content/compiled/kit/buttons/button.json\\\\\\\",\\\\\\\"meta\\\\\\\":{},\\\\\\\"body\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/kit/buttons/button/button.md\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Button\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/kit/buttons/button/demo-main.md\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"demo-main\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Default Button\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"content/kit/buttons/button/demo-types.md\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"route\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"kit/buttons/button\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"demo-type\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Button Types\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}]\\\\\\\"}]\\\"},{\\\"file\\\":\\\"content/compiled/kit/getting-started.json\\\",\\\"meta\\\":{},\\\"body\\\":\\\"[{\\\\\\\"file\\\\\\\":\\\\\\\"content/kit/getting-started.md\\\\\\\",\\\\\\\"meta\\\\\\\":{\\\\\\\"route\\\\\\\":\\\\\\\"kit/getting-started\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"content\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Getting Started\\\\\\\"},\\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\nStarted text\\\\\\\\n\\\\\\\\n```typescript\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\n\\\\\\\\n@Injectable()\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\n\\\\\\\\n  constructor(private http: Http,\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\n    const data = route.data;\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\n    if (data['content']) {\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\n          .map(res => res.text())\\\\\\\\n          .map(body => {\\\\\\\\n            console.log('postBody', body);\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\n          });\\\\\\\\n    } else {\\\\\\\\n      alert(404);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n}\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\"}]\\\"},{\\\"file\\\":\\\"content/compiled/kit/overview.json\\\",\\\"meta\\\":{},\\\"body\\\":\\\"[{\\\\\\\"file\\\\\\\":\\\\\\\"content/kit/overview.md\\\\\\\",\\\\\\\"meta\\\\\\\":{\\\\\\\"route\\\\\\\":\\\\\\\"kit/overview\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"content\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Overview\\\\\\\"},\\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\nIntro text\\\\\\\\n\\\\\\\\n```typescript\\\\\\\\nimport { Injectable } from '@angular/core';\\\\\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\\\\\nimport { Http } from '@angular/http';\\\\\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\\\\\nimport 'rxjs/add/operator/map';\\\\\\\\nimport { Observable } from 'rxjs/Observable';\\\\\\\\n\\\\\\\\n@Injectable()\\\\\\\\nexport class ContentResolverService implements Resolve<any> {\\\\\\\\n\\\\\\\\n  constructor(private http: Http,\\\\\\\\n              private mdRender: MdRenderService) {\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\\\\\n    const data = route.data;\\\\\\\\n    console.log('!resolve data', data);\\\\\\\\n    if (data['content']) {\\\\\\\\n      return this.http.get(`/content/${data['content']}`)\\\\\\\\n          .map(res => res.text())\\\\\\\\n          .map(body => {\\\\\\\\n            console.log('postBody', body);\\\\\\\\n            return this.mdRender.render(body);\\\\\\\\n          });\\\\\\\\n    } else {\\\\\\\\n      alert(404);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n}\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\"}]\\\"},{\\\"file\\\":\\\"content/compiled/kit/buttons/button.json\\\",\\\"meta\\\":{},\\\"body\\\":\\\"[{\\\\\\\"file\\\\\\\":\\\\\\\"content/kit/buttons/button/button.md\\\\\\\",\\\\\\\"meta\\\\\\\":{\\\\\\\"route\\\\\\\":\\\\\\\"kit/buttons/button\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"content\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Button\\\\\\\"},\\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\nSome intro info\\\\\\\\n\\\\\\\\n## API\\\\\\\\n\\\\\\\\nSome table info\\\\\\\\n\\\\\\\\nProperty | Description | Type | Default\\\\\\\\n-----|-----|-----|------\\\\\\\\ntype | can be set to `primary` `dashed` `danger`(added in 2.7) or omitted | string | 'default'\\\\\\\\nhtmlType | to set the original `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button`\\\\\\\\nicon | set the icon of button, see: Icon component | string | -\\\\\\\\nshape | can be set to `circle` or omitted | string | -\\\\\\\\nsize | can be set to `small` `large` or omitted | string | `default`\\\\\\\\nloading | to set the loading status of button | boolean \\\\\\\\\\\\\\\\| { delay: number } | `false`\\\\\\\\nonClick | set the handler to handle `click` event | function | -\\\\\\\\nghost | make background transparent and invert text and border color, added in 2.7 | boolean | false\\\\\\\"},{\\\\\\\"file\\\\\\\":\\\\\\\"content/kit/buttons/button/demo-main.md\\\\\\\",\\\\\\\"meta\\\\\\\":{\\\\\\\"route\\\\\\\":\\\\\\\"kit/buttons/button\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"demo-main\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Default Button\\\\\\\"},\\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\nDemo info\\\\\\\\n\\\\\\\\n```html\\\\\\\\n<kit-button>Click!</kit-button>\\\\\\\\n```\\\\\\\\n\\\\\\\"},{\\\\\\\"file\\\\\\\":\\\\\\\"content/kit/buttons/button/demo-types.md\\\\\\\",\\\\\\\"meta\\\\\\\":{\\\\\\\"route\\\\\\\":\\\\\\\"kit/buttons/button\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"demo-type\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Button Types\\\\\\\"},\\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\nDemo info\\\\\\\\n\\\\\\\\n```html\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'default'\\\\\\\\\\\\\\\">Type=default</kit-button>\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'primary'\\\\\\\\\\\\\\\">Type=primary</kit-button>\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'success'\\\\\\\\\\\\\\\">Type=success</kit-button>\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'warning'\\\\\\\\\\\\\\\">Type=warning</kit-button>\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'error'\\\\\\\\\\\\\\\">Type=error</kit-button>\\\\\\\\n<kit-button [type]=\\\\\\\\\\\\\\\"'link'\\\\\\\\\\\\\\\">Type=link</kit-button>\\\\\\\\n```\\\\\\\\n\\\\\\\"}]\\\"}]\"},{\"file\":\"content/compiled/kit/getting-started.json\",\"meta\":{},\"body\":\"[{\\\"file\\\":\\\"content/kit/getting-started.md\\\",\\\"meta\\\":{\\\"route\\\":\\\"kit/getting-started\\\",\\\"id\\\":\\\"content\\\",\\\"title\\\":\\\"Getting Started\\\"},\\\"body\\\":\\\"\\\\nStarted text\\\\n\\\\n```typescript\\\\nimport { Injectable } from '@angular/core';\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\nimport { Http } from '@angular/http';\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\nimport 'rxjs/add/operator/map';\\\\nimport { Observable } from 'rxjs/Observable';\\\\n\\\\n@Injectable()\\\\nexport class ContentResolverService implements Resolve<any> {\\\\n\\\\n  constructor(private http: Http,\\\\n              private mdRender: MdRenderService) {\\\\n  }\\\\n\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\n    const data = route.data;\\\\n    console.log('!resolve data', data);\\\\n    if (data['content']) {\\\\n      return this.http.get(`/content/${data['content']}`)\\\\n          .map(res => res.text())\\\\n          .map(body => {\\\\n            console.log('postBody', body);\\\\n            return this.mdRender.render(body);\\\\n          });\\\\n    } else {\\\\n      alert(404);\\\\n    }\\\\n  }\\\\n\\\\n}\\\\n\\\\n```\\\\n\\\"}]\"},{\"file\":\"content/compiled/kit/overview.json\",\"meta\":{},\"body\":\"[{\\\"file\\\":\\\"content/kit/overview.md\\\",\\\"meta\\\":{\\\"route\\\":\\\"kit/overview\\\",\\\"id\\\":\\\"content\\\",\\\"title\\\":\\\"Overview\\\"},\\\"body\\\":\\\"\\\\nIntro text\\\\n\\\\n```typescript\\\\nimport { Injectable } from '@angular/core';\\\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\\\nimport { Http } from '@angular/http';\\\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\\\nimport 'rxjs/add/operator/map';\\\\nimport { Observable } from 'rxjs/Observable';\\\\n\\\\n@Injectable()\\\\nexport class ContentResolverService implements Resolve<any> {\\\\n\\\\n  constructor(private http: Http,\\\\n              private mdRender: MdRenderService) {\\\\n  }\\\\n\\\\n  resolve(route: ActivatedRouteSnapshot,\\\\n          state: RouterStateSnapshot): Observable<any> {\\\\n    const data = route.data;\\\\n    console.log('!resolve data', data);\\\\n    if (data['content']) {\\\\n      return this.http.get(`/content/${data['content']}`)\\\\n          .map(res => res.text())\\\\n          .map(body => {\\\\n            console.log('postBody', body);\\\\n            return this.mdRender.render(body);\\\\n          });\\\\n    } else {\\\\n      alert(404);\\\\n    }\\\\n  }\\\\n\\\\n}\\\\n\\\\n```\\\\n\\\"}]\"},{\"file\":\"content/compiled/kit/buttons/button.json\",\"meta\":{},\"body\":\"[{\\\"file\\\":\\\"content/kit/buttons/button/button.md\\\",\\\"meta\\\":{\\\"route\\\":\\\"kit/buttons/button\\\",\\\"id\\\":\\\"content\\\",\\\"title\\\":\\\"Button\\\"},\\\"body\\\":\\\"\\\\nSome intro info\\\\n\\\\n## API\\\\n\\\\nSome table info\\\\n\\\\nProperty | Description | Type | Default\\\\n-----|-----|-----|------\\\\ntype | can be set to `primary` `dashed` `danger`(added in 2.7) or omitted | string | 'default'\\\\nhtmlType | to set the original `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button`\\\\nicon | set the icon of button, see: Icon component | string | -\\\\nshape | can be set to `circle` or omitted | string | -\\\\nsize | can be set to `small` `large` or omitted | string | `default`\\\\nloading | to set the loading status of button | boolean \\\\\\\\| { delay: number } | `false`\\\\nonClick | set the handler to handle `click` event | function | -\\\\nghost | make background transparent and invert text and border color, added in 2.7 | boolean | false\\\"},{\\\"file\\\":\\\"content/kit/buttons/button/demo-main.md\\\",\\\"meta\\\":{\\\"route\\\":\\\"kit/buttons/button\\\",\\\"id\\\":\\\"demo-main\\\",\\\"title\\\":\\\"Default Button\\\"},\\\"body\\\":\\\"\\\\nDemo info\\\\n\\\\n```html\\\\n<kit-button>Click!</kit-button>\\\\n```\\\\n\\\"},{\\\"file\\\":\\\"content/kit/buttons/button/demo-types.md\\\",\\\"meta\\\":{\\\"route\\\":\\\"kit/buttons/button\\\",\\\"id\\\":\\\"demo-types\\\",\\\"title\\\":\\\"Button Types\\\"},\\\"body\\\":\\\"\\\\nDemo info\\\\n\\\\n```html\\\\n<kit-button [type]=\\\\\\\"'default'\\\\\\\">Type=default</kit-button>\\\\n<kit-button [type]=\\\\\\\"'primary'\\\\\\\">Type=primary</kit-button>\\\\n<kit-button [type]=\\\\\\\"'success'\\\\\\\">Type=success</kit-button>\\\\n<kit-button [type]=\\\\\\\"'warning'\\\\\\\">Type=warning</kit-button>\\\\n<kit-button [type]=\\\\\\\"'error'\\\\\\\">Type=error</kit-button>\\\\n<kit-button [type]=\\\\\\\"'link'\\\\\\\">Type=link</kit-button>\\\\n```\\\\n\\\"}]\"}]"},{"file":"content/compiled/kit/getting-started.json","meta":{},"body":"[{\"file\":\"content/kit/getting-started.md\",\"meta\":{\"route\":\"kit/getting-started\",\"id\":\"content\",\"title\":\"Getting Started\"},\"body\":\"\\nStarted text\\n\\n```typescript\\nimport { Injectable } from '@angular/core';\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\nimport { Http } from '@angular/http';\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\nimport 'rxjs/add/operator/map';\\nimport { Observable } from 'rxjs/Observable';\\n\\n@Injectable()\\nexport class ContentResolverService implements Resolve<any> {\\n\\n  constructor(private http: Http,\\n              private mdRender: MdRenderService) {\\n  }\\n\\n  resolve(route: ActivatedRouteSnapshot,\\n          state: RouterStateSnapshot): Observable<any> {\\n    const data = route.data;\\n    console.log('!resolve data', data);\\n    if (data['content']) {\\n      return this.http.get(`/content/${data['content']}`)\\n          .map(res => res.text())\\n          .map(body => {\\n            console.log('postBody', body);\\n            return this.mdRender.render(body);\\n          });\\n    } else {\\n      alert(404);\\n    }\\n  }\\n\\n}\\n\\n```\\n\"}]"},{"file":"content/compiled/kit/overview.json","meta":{},"body":"[{\"file\":\"content/kit/overview.md\",\"meta\":{\"route\":\"kit/overview\",\"id\":\"content\",\"title\":\"Overview\"},\"body\":\"\\nIntro text\\n\\n```typescript\\nimport { Injectable } from '@angular/core';\\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\\nimport { Http } from '@angular/http';\\nimport { MdRenderService } from '@nvxme/ngx-md-render';\\nimport 'rxjs/add/operator/map';\\nimport { Observable } from 'rxjs/Observable';\\n\\n@Injectable()\\nexport class ContentResolverService implements Resolve<any> {\\n\\n  constructor(private http: Http,\\n              private mdRender: MdRenderService) {\\n  }\\n\\n  resolve(route: ActivatedRouteSnapshot,\\n          state: RouterStateSnapshot): Observable<any> {\\n    const data = route.data;\\n    console.log('!resolve data', data);\\n    if (data['content']) {\\n      return this.http.get(`/content/${data['content']}`)\\n          .map(res => res.text())\\n          .map(body => {\\n            console.log('postBody', body);\\n            return this.mdRender.render(body);\\n          });\\n    } else {\\n      alert(404);\\n    }\\n  }\\n\\n}\\n\\n```\\n\"}]"},{"file":"content/compiled/kit/buttons/button.json","meta":{},"body":"[{\"file\":\"content/kit/buttons/button/button.md\",\"meta\":{\"route\":\"kit/buttons/button\",\"id\":\"content\",\"title\":\"Button\"},\"body\":\"\\nSome intro info\\n\\n## API\\n\\nSome table info\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned | $1600 |\\n| col 2 is      | centered      |   $12 |\\n| zebra stripes | are neat      |    $1 |\"},{\"file\":\"content/kit/buttons/button/demo-main.md\",\"meta\":{\"route\":\"kit/buttons/button\",\"id\":\"demo-main\",\"title\":\"Default Button\"},\"body\":\"\\nDemo info\\n\\n```html\\n<kit-button>Click!</kit-button>\\n```\\n\"},{\"file\":\"content/kit/buttons/button/demo-types.md\",\"meta\":{\"route\":\"kit/buttons/button\",\"id\":\"demo-types\",\"title\":\"Button Types\"},\"body\":\"\\nDemo info\\n\\n```html\\n<kit-button [type]=\\\"'default'\\\">Type=default</kit-button>\\n<kit-button [type]=\\\"'primary'\\\">Type=primary</kit-button>\\n<kit-button [type]=\\\"'success'\\\">Type=success</kit-button>\\n<kit-button [type]=\\\"'warning'\\\">Type=warning</kit-button>\\n<kit-button [type]=\\\"'error'\\\">Type=error</kit-button>\\n<kit-button [type]=\\\"'link'\\\">Type=link</kit-button>\\n```\\n\"}]"}]
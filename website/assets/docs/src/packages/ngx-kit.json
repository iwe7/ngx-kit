{"genTime":"2017-11-01T08:42:34.212Z","docs":[{"name":"CONTRIBUTING","meta":{"title":"Contributing","apiOrder":100},"content":"\r\n# Contributing to ngx-kit\r\n\r\nInformation for ngx-kit developers.\r\n\r\n\r\n\r\n## Docs\r\n\r\n* Create README.md for any module.\r\n* Write jsDoc for services, components and directives.\r\n  * Mark component/directive methods with `@publicApi` in jsDoc, if you want do display method in website documentation.\r\n  * Add service public method will be displayed in website documentation.\r\n  * Use `@apiOrder` in jsDoc for sort services/components/directives in website documentation.  \r\n\r\n\r\n\r\n## Best Practices\r\n\r\nCommon component delivered to a project by npm as a package. It means that you can't modify it's code directly.\r\n  \r\nRemember in most cases ngx-kit common components used for creating ui kits that will be used by end user. \r\n\r\n### Do not hide any elements or components inside \r\n\r\nYou should give direct access to all components or html elements. It is important for easy modification, event binding, ARIA customizing. \r\n\r\n### Service better then directive or component\r\n\r\nIf you could place some logic inside service - do it. User should provide service by local component's providers.\r\n\r\nFor example `kit-overlay-position.service`. It could be some wrapper-component with same functionality, but result code would be redundant. \r\n\r\n\r\n\r\n## Commit Message Guidelines\r\n\r\n### Commit Message Format\r\n\r\nEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:\r\n\r\n```\r\n<type>(<scope>): <subject>\r\n<BLANK LINE>\r\n<body>\r\n<BLANK LINE>\r\n<footer>\r\n```\r\n\r\nThe header is mandatory and the scope of the header is optional.\r\n\r\nFooter should contain a closing reference to an issue if any.\r\n\r\n### Type\r\n\r\nMust be one of the following:\r\n\r\n* **build**: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n* **ci**: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n* **docs**: Documentation only changes\r\n* **feat**: A new feature\r\n* **fix**: A bug fix\r\n* **perf**: A code change that improves performance\r\n* **refactor**: A code change that neither fixes a bug nor adds a feature\r\n* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n* **test**: Adding missing tests or correcting existing tests\r\n\r\n### Scope\r\n\r\nThe scope should be the name of the module affected (**common**, **overlay** etc).\r\n\r\nThere is currently few exception to the \"use module name\" rule:\r\n\r\n* **packaging**: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.\r\n* **changelog**: used for updating the release notes in CHANGELOG.md\r\n* none/empty string: useful for style, test and refactor changes that are done across all packages (e.g. style: add missing semicolons), global documentation`\r\n\r\n### Subject\r\n\r\nThe subject contains succinct description of the change:\r\n\r\n* use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\r\n* don't capitalize first letter\r\n* no dot (.) at the end\r\n\r\n### Body\r\n\r\nJust as in the subject, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\r\n\r\n### Footer\r\n\r\nThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes.\r\n\r\n* \"Closes #ID\"\r\n* \"PR Close #ID\"\r\n\r\nBreaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.\r\n"},{"name":"DEV","meta":{"title":"Dev","apiOrder":99},"content":"\r\n# Dev\r\n\r\nInformation for ngx-kit developers.\r\n\r\n## ngx-kit cli\r\n\r\n### Installation\r\n\r\n`npm i @ngx-kit/cli -g`\r\n\r\n### Commands\r\n\r\n#### copy\r\n\r\n```\r\nngx-kit copy\r\n```\r\n\r\nUses `.ngx-kit.json` configuration for copying source or dist files. Used for copying files during development.\r\n\r\n#### gen-docs\r\n\r\n```\r\nngx-kit gen-docs [path]\r\n```\r\n\r\nUses `.docs-schema.json` configuration for generating meta file that contains all package modules with demos, parsed docs and api.\r\n\r\n#### schematize\r\n\r\n```\r\nngx-kit schematize\r\n```\r\n\r\nConvert ui-modules (like in @ngx-kit/ui-base) to schematics. Uses `.docs-schema.json` configuration.\r\n\r\n### Config files\r\n\r\n#### `.ngx-kit.json`\r\n\r\n```json\r\n{\r\n  \"copy\": {\r\n    \"release\": {\r\n      \"from\": [],\r\n      \"to\": []\r\n    },\r\n    \"src\": {\r\n      \"from\": [\r\n        \"./src/app/package/\",\r\n        \"./docs\",\r\n        \"./.docs-schema.json\"\r\n      ],\r\n      \"to\": []\r\n    }\r\n  },\r\n  \"schematics\": {\r\n    \"src\": \"./src/lib\",\r\n    \"template\": \"./package/_template\",\r\n    \"dist\": \"./package\"\r\n  }\r\n}\r\n```\r\n\r\nYou can create `.ngx-kit.env.json` file that will be automatically merged in `.ngx-kit.json`.\r\n\r\nDo not forget to add env file to `.gitignore`.\r\n\r\n`.ngx-kit.env.json` example:\r\n\r\n```json\r\n{\r\n  \"copy\": {\r\n    \"src\": {\r\n      \"to\": [\r\n        \"D://ngx-kit/website/node_modules/ui-base-src\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### `.docs-schema.json`\r\n\r\n```json\r\n{\r\n  \"demo\": \"./src/app/package/demo\",\r\n  \"docs\": \"./docs\",\r\n  \"src\": \"./src/app/package/lib\"\r\n}\r\n```\r\n\r\n\r\n## Angular-cli schematics\r\n\r\nThere are few custom blueprints for the fast entity generation. Created for ngx-kit and ui-base development.\r\n\r\n### Installation\r\n\r\n```\r\nnpm i @angular-devkit/core @angular-devkit/schematics --save-dev\r\nnpm i @ngx-kit/schematics --save-dev\r\n```\r\n\r\nWorks only with `angular-cli@1.5.0-beta.4^`.\r\n\r\n### Usage\r\n\r\n* Component: `ng g kc -c=@ngx-kit/schematics PATH/NAME`\r\n* Demo: `ng g kdm -c=@ngx-kit/schematics PATH/NAME`\r\n* Module: `ng g km -c=@ngx-kit/schematics PATH/NAME`\r\n\r\nOr update `.angular-cli.json` for run cmd without `-c` param:\r\n\r\n```json\r\n...\r\n\"defaults\": {\r\n  \"schematics\": {\r\n    \"collection\": \"@ngx-kit/schematics\"\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n### Cases\r\n\r\n#### Non `src/app` directory\r\n\r\nSetup `appRoot` in `.angular-cli.json`. For example:\r\n\r\n```\r\n...\r\n\"apps\": [\r\n  {\r\n    \"name\": \"package\",\r\n    \"root\": \"package\",\r\n    \"appRoot\": \"src\",\r\n    ...\r\n  },\r\n```"},{"name":"OVERVIEW","meta":{"title":"Overview","apiOrder":1},"content":"\r\n# Ngx-kit overview\r\n\r\nLow level components and services for creating Angular ui-components.\r\n\r\nYou don't need 3rd party ui-kit, your can create your own components that do exactly what you want. \r\n\r\n\r\n## Features\r\n\r\n* Set of helpers without styling\r\n* AOT support\r\n* Server-rendering support\r\n* Components blueprints: [@ngx-kit/ui-base](https://ngx-kit.com/ui-base)\r\n* Free and open-source\r\n* Setup via NPM\r\n\r\n\r\n## Installation\r\n\r\n```\r\nnpm install @ngx-kit/ngx-kit @ngx-kit/styler --save\r\n```\r\n\r\n\r\n## Links\r\n\r\n* [github](https://github.com/ngx-kit/ngx-kit)\r\n"}],"modules":[{"name":"kit-collapse","api":[{"class":"KitCollapseHostService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"activate","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Activate item with id.","tags":[{"name":"publicApi","value":""}]}},{"name":"activateFirst","params":[],"doc":{"comment":"Activate first registered item.","tags":[{"name":"publicApi","value":""}]}},{"name":"addId","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Add item.","tags":[{"name":"publicApi","value":""}]}},{"name":"deactivate","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Deactivate item.","tags":[{"name":"publicApi","value":""}]}},{"name":"deleteId","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Delete item.","tags":[{"name":"publicApi","value":""}]}},{"name":"isActive","type":"BooleanKeyword","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Is item activated.","tags":[{"name":"publicApi","value":""}]}},{"name":"toggle","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Change item activation state.","tags":[{"name":"publicApi","value":""}]}}],"props":[{"name":"multiple","doc":{"tags":[{"name":"publicApi","value":""}]}}],"getProps":[{"name":"active$","type":{"type":"Observable","args":[{"type":"Set","args":["KitCollapseId"]}]},"doc":{"comment":"Get `Observable` with activated items.","tags":[{"name":"publicApi","value":""}]}}],"setProps":[]},{"class":"KitCollapseItemService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"ngOnDestroy","params":[],"doc":null},{"name":"toggle","params":[],"doc":{"comment":"Toggle activation state.","tags":[{"name":"publicApi","value":""}]}}],"props":[],"getProps":[{"name":"active","type":"BooleanKeyword","doc":{"comment":"Is item activated.","tags":[{"name":"publicApi","value":""}]}},{"name":"id","type":"KitCollapseId","doc":{"comment":"Get item id.","tags":[{"name":"publicApi","value":""}]}}],"setProps":[{"name":"active","params":[{"name":"active","type":"BooleanKeyword"}],"doc":{"comment":"Set activation state.","tags":[{"name":"publicApi","value":""}]}},{"name":"id","params":[{"name":"id","type":"KitCollapseId"}],"doc":{"comment":"Set item id.","tags":[{"name":"publicApi","value":""}]}}]},{"class":"KitCollapseDirective","type":"Directive","selector":"[kitCollapse]","doc":{"comment":"Structure directive that collapsing.\r\n\r\nState based on `KitCollapseItemService` provided on a parent.","tags":[]},"inputs":[{"name":"kitCollapse","type":"VoidKeyword","doc":null}],"outputs":[],"methods":[{"name":"ngOnDestroy","params":[],"doc":null},{"name":"ngOnInit","params":[],"doc":null}],"props":[{"name":"kitCollapse","type":"VoidKeyword","doc":null}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Collapse\r\n\r\n## Main purpose\r\n \r\n* accordion component\r\n* collapsible menus\r\n\r\n\r\n## Features\r\n\r\n* handle state by services\r\n* use structural directive (no render if template is not displayed)\r\n* optional: multiple select\r\n* optional: auto activation first item \r\n* optional: setup custom id for items\r\n\r\n\r\n## Usage\r\n\r\nFor example you have `ui-menu`, `ui-section` component and want to collapse some div inside section.\r\n\r\nProvide `KitCollapseHostService` inside `ui-menu` and `KitCollapseItemService` inside `ui-section`. \r\n\r\n```html\r\n<ui-menu>\r\n  <ui-section>\r\n    <div title>Section 1 title</div>\r\n    <div>Section 1 body</div>\r\n  </ui-section>\r\n  <ui-section>\r\n    <div title>Section 2 title</div>\r\n    <div>Section 2 body</div>\r\n  </ui-section>\r\n</ui-menu>\r\n```\r\n\r\n##### ui-section.component.html\r\n\r\n```html\r\n<div (click)=\"toggle()\">\r\n  <ng-content select=\"[title]\"></ng-content>\r\n</div>\r\n<div *kitCollapse>\r\n  <ng-content></ng-content>\r\n</div>\r\n```\r\n\r\nUse `KitCollapseItemService` for set state of collapse.\r\n\r\n##### ui-section.component.ts\r\n\r\n```typescript\r\nproviders: [KitCollapseItemService]\r\n...\r\nconstructor(private itemService: KitCollapseItemService) {\r\n}\r\n...\r\ntoggle() {\r\n  this.itemService.toggle();\r\n}\r\n```\r\n\r\n\r\n## Examples\r\n\r\n* ui-base:accordion - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-accordion), [demo](http://ngx-kit.com/ui-base/module/ui-accordion) \r\n* ui-base:side-menu - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-side-menu), [demo](http://ngx-kit.com/ui-base/module/ui-side-menu) \r\n"}],"demo":[]},{"name":"kit-common","api":[{"class":"KitTreeClickDirective","type":"Directive","selector":"[kitTreeClick]","doc":{"comment":"Unstable!","tags":[]},"inputs":[{"name":"kitTreeClick","type":"VoidKeyword","doc":null}],"outputs":[{"name":"treeClick","type":["MouseEvent"],"doc":null}],"methods":[{"name":"clickHandler","params":[{"name":"event","type":"MouseEvent"}],"doc":null}],"props":[{"name":"kitTreeClick","type":"VoidKeyword","doc":null},{"name":"treeClick","doc":null}],"getProps":[],"setProps":[]},{"class":"KitStyleService","type":"Injectable","selector":"","doc":{"comment":"Service works exactly like `ngStyle`, but must be provided on component or directive.\r\n\r\n```typescript\r\nproviders: [KitStyleService],\r\n...\r\nconstructor(private styleService: KitStyleService) {\r\n}\r\n...\r\nthis.styleService.style = {\r\n  background: 'red',\r\n  color: '#fff',\r\n};\r\n```","tags":[]},"inputs":[],"outputs":[],"methods":[],"props":[],"getProps":[],"setProps":[{"name":"style","params":[{"name":"v","type":"KitStyles"}],"doc":null}]},{"class":"KitRepeatDirective","type":"Directive","selector":"[kitRepeat]","doc":{"comment":"Structural directive for template repeating.\r\n\r\nUsage:\r\n\r\n```html\r\n<ng-container *kitRepeat=\"number; let index = index\"></ng-container>\r\n```","tags":[]},"inputs":[{"name":"kitRepeat","type":"NumberKeyword","doc":{"comment":"Number of repeats.","tags":[]}}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[],"doc":null}],"props":[{"name":"kitRepeat","type":"NumberKeyword","doc":{"comment":"Number of repeats.","tags":[]}}],"getProps":[],"setProps":[]},{"class":"KitMultiOutletDirective","type":"Directive","selector":"[kitMultiOutlet]","doc":{"comment":"Unstable!\r\n\r\nUsage:\r\n\r\n```html\r\n<ng-container *kitMultiOutlet=\"Class; params: {first: 1, second: 2}\"></ng-container>\r\n```","tags":[]},"inputs":[{"name":"kitMultiOutlet","type":"KitMultiOutletType","doc":null},{"name":"kitMultiOutletParams","type":"AnyKeyword","doc":null}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[],"doc":null},{"name":"ngOnInit","params":[],"doc":null}],"props":[{"name":"kitMultiOutlet","type":"KitMultiOutletType","doc":null},{"name":"kitMultiOutletParams","type":"AnyKeyword","doc":null}],"getProps":[],"setProps":[]},{"class":"KitClassDirective","type":"Directive","selector":"[kitClass]","doc":{"comment":"Provides `KitClassService` and pass property to `.apply` method.\r\n\r\n```html\r\n<div [kitClass]=\"{color: 'red', active: true}\">\r\n<div class=\"color-red active\">\r\n```","tags":[]},"inputs":[{"name":"kitClass","type":"KitClassSetter","doc":null}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[{"name":"changes","type":"SimpleChanges"}],"doc":null}],"props":[{"name":"kitClass","type":"KitClassSetter","doc":null}],"getProps":[],"setProps":[]},{"class":"KitClassService","type":"Injectable","selector":"","doc":{"comment":"Apply to classes to an element.\r\n\r\nMust be provided on a component or directive.\r\n\r\n```typescript\r\nclassService.apply({color: 'red', active: true});\r\n```\r\n\r\nAdds to element: `class=\"color-red active\"`","tags":[]},"inputs":[],"outputs":[],"methods":[{"name":"apply","type":"VoidKeyword","params":[{"name":"setter","type":"KitClassSetter"}],"doc":{"comment":"Merge to class declaration state.","tags":[]}}],"props":[],"getProps":[],"setProps":[{"name":"state","params":[{"name":"setterRaw","type":"KitClassSetter"}],"doc":{"comment":"Override class declaration state.","tags":[]}}]},{"class":"KitAnchorDirective","type":"Directive","selector":"[kitAnchor]","doc":{"comment":"Anchor for passing link to element to the overlay or similar.","tags":[]},"inputs":[{"name":"kitAnchor","type":"AnyKeyword","doc":null}],"outputs":[],"methods":[],"props":[{"name":"kitAnchor","type":"AnyKeyword","doc":null}],"getProps":[{"name":"nativeEl","doc":{"comment":"Get anchored html-element.","tags":[{"name":"publicApi","value":""}]}}],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Common\r\n\r\nCommon directives.\r\n"}],"demo":[]},{"name":"kit-core","api":[{"class":"KitGlobalListenerService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"listen","type":"FunctionType","params":[{"name":"eventName","type":"StringKeyword"},{"name":"callback","type":"AnyKeyword"}],"doc":null}],"props":[],"getProps":[],"setProps":[]},{"class":"KitPlatformService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"isBrowser","params":[],"doc":null}],"props":[],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Core\r\n"}],"demo":[]},{"name":"kit-datetime","api":[{"class":"KitDatePickerService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"focus","params":[{"name":"date","type":"Date"}],"doc":null},{"name":"isDatesEqual","type":"BooleanKeyword","params":[{"name":"x","type":"Date"},{"name":"y","type":"Date"}],"doc":null},{"name":"modMonth","params":[{"name":"modifier","type":"NumberKeyword"}],"doc":null},{"name":"modYear","params":[{"name":"modifier","type":"NumberKeyword"}],"doc":null},{"name":"registerAriaGrid","params":[{"name":"ariaGrid","type":"KitGridControlService"}],"doc":null}],"props":[],"getProps":[{"name":"grid$","type":{"type":"Observable","args":["KitDatePickerGrid"]},"doc":null},{"name":"monthCursor$","type":{"type":"Observable","args":["Date"]},"doc":null},{"name":"pick","type":{"type":"Observable","args":["Date"]},"doc":null},{"name":"weekdays","type":"ArrayType","doc":null}],"setProps":[{"name":"active","params":[{"name":"date","type":"Date"}],"doc":null}]}],"docs":[],"demo":[]},{"name":"kit-focus-manager","api":[{"class":"KitFocusManagerService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"ngOnDestroy","params":[],"doc":null},{"name":"capture","params":[],"doc":{"comment":"Activate focus-trap.","tags":[{"name":"publicApi","value":""}]}},{"name":"focusFirst","params":[],"doc":{"comment":"Focus first focusable element.","tags":[{"name":"publicApi","value":""}]}},{"name":"focusItem","params":[{"name":"id","type":["StringKeyword","NumberKeyword"]}],"doc":{"comment":"Focus item dy id.","tags":[{"name":"publicApi","value":""}]}},{"name":"focusLast","params":[],"doc":{"comment":"Focus last focusable element.","tags":[{"name":"publicApi","value":""}]}},{"name":"focusNext","params":[],"doc":{"comment":"Focus next focusable element (from current focused).","tags":[{"name":"publicApi","value":""}]}},{"name":"focusPrev","params":[],"doc":{"comment":"Focus prev focusable element (from currect focused).","tags":[{"name":"publicApi","value":""}]}},{"name":"init","params":[],"doc":{"comment":"Required method for start service.","tags":[{"name":"publicApi","value":""}]}},{"name":"register","params":[{"name":"item","type":"KitFocusDirective"}],"doc":{"comment":"Register  item for manual focus.","tags":[{"name":"publicApi","value":""}]}},{"name":"release","params":[],"doc":{"comment":"Disable focus-trap.","tags":[{"name":"publicApi","value":""}]}},{"name":"remove","params":[{"name":"item","type":"KitFocusDirective"}],"doc":{"comment":"Remove item.","tags":[{"name":"publicApi","value":""}]}}],"props":[{"name":"autoCapture","doc":{"comment":"Automatically capture focus after creating.","tags":[]}}],"getProps":[],"setProps":[]},{"class":"KitFocusDirective","type":"Directive","selector":"[kitFocus]","doc":{"comment":"Directive that registered in `KitFocusManagerService` and can be focused from outside.","tags":[]},"inputs":[{"name":"kitFocus","type":["StringKeyword","NumberKeyword"],"doc":{"comment":"Element id.","tags":[]}}],"outputs":[],"methods":[{"name":"ngOnDestroy","params":[],"doc":null},{"name":"focus","params":[],"doc":null}],"props":[{"name":"kitFocus","type":["StringKeyword","NumberKeyword"],"doc":{"comment":"Element id.","tags":[]}}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Focus-manager\r\n\r\nControl focus like a boss.\r\n\r\n## Main purpose\r\n \r\n* dialogs/popups/modals\r\n* complex forms\r\n\r\n## Usage\r\n\r\nProvide `KitFocusManagerService` on component.\r\n\r\n### Focus element\r\n\r\nAdd directive and set id to an element.\r\n\r\n```html\r\n<input [kitFocus]=\"'start'\">\r\n```\r\n\r\nFocus element by `id`\r\n\r\n```typescript\r\nthis.focusManager.focusItem('start');\r\n```\r\n\r\n\r\n### Focus trap\r\n\r\nGreat tool for improve accessibility of components. Keep focus inside component that provide `KitFocusManagerService`.\r\n\r\nInject and init service with `autoCapture`.\r\n\r\n```typescript\r\nproviders: [KitFocusManagerService],\r\n...\r\nconstructor(private focusManager: KitFocusManagerService) {\r\n  this.focusManager.autoCapture = true;\r\n  this.focusManager.init();\r\n}\r\n```\r\n"}],"demo":[]},{"name":"kit-forms","api":[{"class":"KitInputValueAccessorDirective","type":"Directive","selector":"\n    input:not([type=checkbox]):not([type=radio])[formControlName],\n    textarea[formControlName],\n    input:not([type=checkbox]):not([type=radio])[formControl],\n    textarea[formControl],\n    input:not([type=checkbox]):not([type=radio])[ngModel],\n    textarea[ngModel],\n    [ngDefaultControl]\n  ","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"inputHandler","params":[{"name":"rawValue","type":"AnyKeyword"}],"doc":null},{"name":"registerOnChange","params":[{"name":"fn","type":"AnyKeyword"}],"doc":null},{"name":"registerOnTouched","params":[{"name":"fn","type":"AnyKeyword"}],"doc":null},{"name":"setDisabledState","type":"VoidKeyword","params":[{"name":"isDisabled","type":"BooleanKeyword"}],"doc":null},{"name":"writeValue","type":"VoidKeyword","params":[{"name":"rawValue","type":"AnyKeyword"}],"doc":null}],"props":[],"getProps":[],"setProps":[]},{"class":"KitCheckDirective","type":"Directive","selector":"[kitCheck]","doc":{"comment":"Adds to any element ValueAccessor and checkbox/radio behavior.\r\n\r\nWhen is checked - adds class \"checked\" to the element.\r\n\r\nFor a value changing the directive listen click event.","tags":[]},"inputs":[{"name":"checkedClass","default":"checked","doc":null},{"name":"kitCheck","type":"AnyKeyword","doc":null},{"name":"value","type":"AnyKeyword","doc":null}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[{"name":"changes","type":"SimpleChanges"}],"doc":null},{"name":"clickListener","params":[],"doc":{"comment":"Listen to mouse clicks on element.","tags":[]}},{"name":"registerOnChange","params":[{"name":"fn","type":"AnyKeyword"}],"doc":null},{"name":"registerOnTouched","params":[{"name":"fn","type":"AnyKeyword"}],"doc":null},{"name":"setDisabledState","params":[{"name":"isDisabled","type":"BooleanKeyword"}],"doc":null},{"name":"writeValue","params":[{"name":"value","type":"AnyKeyword"}],"doc":null}],"props":[{"name":"checkedClass","doc":null},{"name":"kitCheck","type":"AnyKeyword","doc":null},{"name":"value","type":"AnyKeyword","doc":null}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Forms\r\n\r\n## Main purpose\r\n \r\n* forms\r\n* forms\r\n* forms & inputs\r\n\r\nThere are few different features and all for forms.\r\n\r\n\r\n## Input middleware\r\n\r\nGoal is to intercept a value between html-element and `ngModel`(`VALUE_ACCESSOR`).\r\n\r\n* `KitLimitMiddleware` - controls max length of entered string\r\n* `KitMathParseMiddleware` - parse and calc entered value like math expression\r\n\r\nAt first provide `KitMiddlewareManager` and middleware on the directive/component that will be hosted on input.\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'textarea[uiTextarea]',\r\n  providers: [\r\n    KitMiddlewareManager,\r\n    {\r\n      provide: kitInputMiddleware,\r\n      useClass: KitLimitMiddleware,\r\n      multi: true,\r\n    },\r\n  ],\r\n  ...\r\n}\r\n```\r\n\r\nThen use `KitMiddlewareManager` for setup middleware params.\r\n\r\n```typescript\r\nexport class UiTextareaComponent implements OnChanges {\r\n  @Input() limit: number;\r\n\r\n  constructor(private mw: KitMiddlewareManager) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.mw.update(KitLimitMiddleware, {\r\n      enabled: !!this.limit,\r\n      limit: this.limit,\r\n    });\r\n  }\r\n}\r\n```\r\n\r\n### Examples\r\n\r\n* ui-base:input - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-input), [demo](http://ngx-kit.com/ui-base/module/ui-input) \r\n* ui-base:textarea - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-textarea), [demo](http://ngx-kit.com/ui-base/module/ui-textarea) \r\n\r\n\r\n## `KitCheck`\r\n\r\nAdds to any element ValueAccessor and checkbox/radio behavior.\r\n \r\nWhen is checked - adds class \"checked\" to the element.\r\n \r\nFor a value changing the directive listen click event.\r\n\r\nCheckboxes behavior:\r\n\r\n```html\r\n<button [kitCheck] [(ngModel)]=\"buttonModel1\">Checkbox button 1</button>\r\n<button [kitCheck] [(ngModel)]=\"buttonModel2\">Checkbox button 2</button>\r\n<button [kitCheck] [(ngModel)]=\"buttonModel3\">Checkbox button 3</button>\r\n```\r\n\r\nRadio behavior:\r\n\r\n```html\r\n<button [(ngModel)]=\"buttonModel\" [value]=\"1\">Radio button 1</button>\r\n<button [(ngModel)]=\"buttonModel\" [value]=\"2\">Radio button 2</button>\r\n<button [(ngModel)]=\"buttonModel\" [value]=\"3\">Radio button 3</button>\r\n```\r\n\r\n### Examples\r\n\r\n* ui-base:button - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-button), [demo](http://ngx-kit.com/ui-base/module/ui-button)\r\n"}],"demo":[]},{"name":"kit-grid","api":[{"class":"KitGridControlDirective","type":"Directive","selector":"[kitGridControl]","doc":{"comment":"Registration directive.\r\n\r\nInject KitGridControlService and self-register.\r\n\r\nUsing for pick html-element and listen keyboard events on it.\r\n\r\nMakes any element focusable.","tags":[]},"inputs":[{"name":"kitGridControl","type":"VoidKeyword","doc":null}],"outputs":[],"methods":[],"props":[{"name":"kitGridControl","type":"VoidKeyword","doc":null},{"name":"tabindex","doc":null}],"getProps":[{"name":"nativeEl","type":"Element","doc":null}],"setProps":[]},{"class":"KitGridControlService","type":"Injectable","selector":"","doc":{"comment":"Listens keyboard events and emit actions for grid controlling (navigations event, etc).\r\n\r\nActions:\r\n* Arrow Up - `prevRow`\r\n* Arrow Right - `nextCell`\r\n* Arrow Down - `nextRow`\r\n* Arrow Left - `prevCell`\r\n* Home - `home`\r\n* End - `end`\r\n* Page Up - `prevPage`\r\n* Page Down - `nextPage`\r\n* Enter - `enter`\r\n* Space - `enter`\r\n* Ctrl + Page Up - `prevSet`\r\n* Ctrl + Page Down - `nextSet`","tags":[]},"inputs":[],"outputs":[],"methods":[{"name":"ngOnChanges","params":[],"doc":null},{"name":"registerGrid","params":[{"name":"grid","type":"KitGridControlDirective"}],"doc":{"comment":"`kitGridControl` automatically register via this method.","tags":[{"name":"publicApi","value":""}]}}],"props":[],"getProps":[{"name":"actions","type":{"type":"Observable","args":["KitGridControlActionType"]},"doc":{"comment":"Get `Observable` with captured actions.","tags":[{"name":"publicApi","value":""}]}}],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Grid\r\n\r\nTables and grids helpers.\r\n\r\n\r\n## Main purpose\r\n \r\n* components where you have two-dimension data presentation (tables, date-pickers etc)\r\n\r\n\r\n## Usage\r\n\r\n### Control navigation with `KitGridControlService`\r\n\r\nProvide `KitGridControlService` at any component and add `[kitGridControl]` to element where you want to listen keyboard events.\r\n\r\n```html\r\n<div [kitGridControl]>\r\n  ... grid elements\r\n</div>\r\n```\r\n\r\nInject `KitGridControlService` and subscribe to `actions`.\r\n\r\n```typescript\r\nconstructor(private grid: KitGridControlService) {\r\n  this.grid.actions.subscribe((action: KitGridControlActionType) => {\r\n    ...\r\n  });\r\n}\r\n```\r\n\r\n\r\n## Examples\r\n\r\n* [ngx-kit:datetime/KitDatePickerService sources](https://github.com/ngx-kit/ngx-kit/blob/master/packages/ngx-kit/src/kit-datetime/kit-date-picker.service.ts)\r\n* [ui-base:date-picker demo](http://ngx-kit.com/ui-base/module/ui-date-picker)\r\n"}],"demo":[]},{"name":"kit-icons","api":[{"class":"KitIconsRegistryService","type":"Injectable","selector":"","doc":{"comment":"## Usage\r\n\r\n### Register icons\r\n\r\n```typescript\r\nthis.iconsRegistry.register('star', '/assets/icons/star.svg');\r\n// or\r\nthis.iconsRegistry.registerSet([\r\n{name: 'star', url: '/assets/icons/star.svg'},\r\n{name: 'cloud', url: '/assets/icons/cloud.svg'},\r\n]);\r\n```\r\n\r\n### Use in a template\r\n\r\n```html\r\n<kit-icon [name]=\"'star'\"></kit-icon>\r\n```","tags":[{"name":"todo","value":"cache pending (avoid parallel loading of same icon)"}]},"inputs":[],"outputs":[],"methods":[{"name":"cloneSvg","type":"SVGElement","params":[{"name":"svg","type":"SVGElement"}],"doc":null},{"name":"get","type":{"type":"Observable","args":["SVGElement"]},"params":[{"name":"name","type":"StringKeyword"}],"doc":{"comment":"Get icon by name.","tags":[{"name":"publicApi","value":""}]}},{"name":"register","params":[{"name":"name","type":"StringKeyword"},{"name":"url","type":"StringKeyword"}],"doc":{"comment":"Register icon.","tags":[{"name":"publicApi","value":""}]}},{"name":"registerSet","params":[{"name":"icons","type":"ArrayType"}],"doc":{"comment":"Register icons set.","tags":[{"name":"publicApi","value":""}]}}],"props":[],"getProps":[],"setProps":[]},{"class":"KitIconComponent","type":"Component","selector":"kit-icon","doc":null,"inputs":[{"name":"color","default":"currentcolor","doc":{"comment":"Svg fill color.","tags":[]}},{"name":"name","type":"StringKeyword","doc":{"comment":"Name in the registry.","tags":[]}},{"name":"size","default":"100%","doc":{"comment":"Size in pixels or percents.","tags":[]}}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[],"doc":null},{"name":"ngOnInit","params":[],"doc":null}],"props":[{"name":"color","doc":{"comment":"Svg fill color.","tags":[]}},{"name":"name","type":"StringKeyword","doc":{"comment":"Name in the registry.","tags":[]}},{"name":"size","doc":{"comment":"Size in pixels or percents.","tags":[]}}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Icons\r\n"}],"demo":[]},{"name":"kit-loading-bar","api":[{"class":"KitLoadingBarService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"end","params":[{"name":"key","type":"StringKeyword"}],"doc":{"comment":"Finish loading animation.","tags":[{"name":"publicApi","value":""}]}},{"name":"start","params":[{"name":"key","type":"StringKeyword"}],"doc":{"comment":"Start loading animation.","tags":[{"name":"publicApi","value":""}]}}],"props":[],"getProps":[{"name":"barState$","type":{"type":"Observable","args":["StringKeyword"]},"doc":null},{"name":"end$","type":{"type":"Observable","args":["StringKeyword"]},"doc":null},{"name":"start$","type":{"type":"Observable","args":["StringKeyword"]},"doc":null}],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Loading-bar\r\n"}],"demo":[]},{"name":"kit-notification","api":[{"class":"KitNotificationService","type":"Injectable","selector":"","doc":{"comment":"## Global config\r\n\r\n```typescript\r\nconstructor(private notificationService: KitNotificationService) {\r\n  this.notificationService.config({\r\n    duration: 4000,\r\n    position: 'top-right',\r\n  });\r\n}\r\n```\r\n\r\n## Open notification\r\n\r\n```typescript\r\nconstructor(private notificationService: KitNotificationService) {\r\n  this.notificationService.open(NotifViewComponent, {first: 1, second: 2});\r\n}\r\n```","tags":[]},"inputs":[],"outputs":[],"methods":[{"name":"close","params":[{"name":"__id","type":"StringKeyword"}],"doc":null},{"name":"config","params":[{"name":"config","type":{"type":"Partial","args":["KitNotificationHostConfig"]}}],"doc":{"comment":"Configure notification service.","tags":[{"name":"publicApi","value":""}]}},{"name":"open","params":[{"name":"params","type":"AnyKeyword"}],"doc":{"comment":"Display notification message.","tags":[{"name":"publicApi","value":""}]}}],"props":[],"getProps":[{"name":"config$","type":{"type":"Observable","args":["KitNotificationHostConfig"]},"doc":null},{"name":"items$","type":{"type":"Observable","args":["ArrayType"]},"doc":null}],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Notification\r\n"}],"demo":[]},{"name":"kit-overlay","api":[{"class":"KitOverlayService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"hostComponent","typeParameters":["T"],"type":{"type":"ComponentRef","args":["T"]},"params":[{"name":"component","type":{"type":"Type","args":["T"]}}],"doc":null},{"name":"hostDoCheckEmit","params":[],"doc":null},{"name":"hostTemplate","type":"ViewRef","params":[{"name":"templateRef","type":{"type":"TemplateRef","args":["AnyKeyword"]}},{"name":"context","type":"AnyKeyword"}],"doc":null},{"name":"registerHost","params":[{"name":"host","type":"KitOverlayHostComponent"}],"doc":null}],"props":[],"getProps":[{"name":"hostDoCheck$","type":{"type":"Observable","args":["VoidKeyword"]},"doc":null}],"setProps":[]},{"class":"DropdownStrategyService","type":"Injectable","selector":"","doc":{"tags":[{"name":"todo","value":"correct handle cases when anchor is not visible"}]},"inputs":[],"outputs":[],"methods":[{"name":"autofix","type":["NullKeyword","TypeLiteral"],"params":[{"name":"el","type":"StrategyEl"},{"name":"anchor","type":"StrategyEl"},{"name":"field","type":"StrategyField"},{"name":"position","type":"KitOverlayPosition"},{"name":"autofix","type":"KitOverlayAutofix"}],"doc":null},{"name":"reposition","type":"KitStyles","params":[{"name":"anchor","type":"StrategyEl"},{"name":"field","type":"StrategyField"},{"name":"position","type":"KitOverlayPosition"}],"doc":null}],"props":[],"getProps":[],"setProps":[]},{"class":"KitOverlayPositionDirective","type":"Directive","selector":"[kitOverlayPosition]","doc":null,"inputs":[{"name":"kitOverlayPosition","type":{"type":"Partial","args":["KitOverlayPositionDirectiveParams"]},"doc":null}],"outputs":[{"name":"outsideClick","type":["MouseEvent"],"doc":null}],"methods":[{"name":"ngOnChanges","params":[],"doc":null},{"name":"ngOnInit","params":[],"doc":null}],"props":[{"name":"kitOverlayPosition","type":{"type":"Partial","args":["KitOverlayPositionDirectiveParams"]},"doc":null},{"name":"outsideClick","doc":null}],"getProps":[],"setProps":[]},{"class":"KitOverlayPositionService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"ngOnDestroy","params":[],"doc":null},{"name":"applyParams","params":[{"name":"params","type":{"type":"Partial","args":["KitOverlayPositionDirectiveParams"]}}],"doc":null},{"name":"getRect","type":"StrategyEl","params":[{"name":"el","type":["KitAnchorDirective","HTMLElement"]}],"doc":null},{"name":"reposition","params":[],"doc":null}],"props":[{"name":"anchor","type":["KitAnchorDirective","HTMLElement"],"doc":{"comment":"Anchor element for placing.","tags":[]}},{"name":"autofix","type":"KitOverlayAutofix","doc":{"comment":"Do not cross window boundaries.\r\n\r\n* none - do nothing\r\n* switch-position - change direction top-bottom / left-right","tags":[{"name":"publicApi","value":""}]}},{"name":"outsideClick$","doc":null},{"name":"position","type":"KitOverlayPosition","doc":null},{"name":"type","type":"KitOverlayType","doc":null}],"getProps":[],"setProps":[]},{"class":"SideStrategyService","type":"Injectable","selector":"","doc":{"tags":[{"name":"todo","value":"correct handle cases when anchor is not visible"}]},"inputs":[],"outputs":[],"methods":[{"name":"autofix","type":["NullKeyword","TypeLiteral"],"params":[{"name":"el","type":"StrategyEl"},{"name":"anchor","type":"StrategyEl"},{"name":"field","type":"StrategyField"},{"name":"position","type":"KitOverlayPosition"},{"name":"autofix","type":"KitOverlayAutofix"}],"doc":null},{"name":"reposition","type":"KitStyles","params":[{"name":"anchor","type":"StrategyEl"},{"name":"field","type":"StrategyField"},{"name":"position","type":"KitOverlayPosition"}],"doc":null}],"props":[],"getProps":[],"setProps":[]},{"class":"KitOverlayHostComponent","type":"Component","selector":"kit-overlay-host","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"ngDoCheck","params":[],"doc":null}],"props":[],"getProps":[],"setProps":[]},{"class":"KitOverlayDirective","type":"Directive","selector":"[kitOverlay]","doc":null,"inputs":[{"name":"kitOverlay","type":"BooleanKeyword","doc":null}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[{"name":"changes","type":"SimpleChanges"}],"doc":null},{"name":"ngOnDestroy","params":[],"doc":null},{"name":"updateHost","params":[],"doc":null}],"props":[{"name":"kitOverlay","type":"BooleanKeyword","doc":null}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Overlay\r\n\r\n## Main purpose\r\n \r\n* dialogs\r\n* popups\r\n* tooltips\r\n\r\n\r\n## Usage\r\n\r\nBase step - add `<kit-overlay-host></kit-overlay-host>` to any high-level component (root is preferred). We use `position:fixed` but few things could brake proper functionality, for example css `transform`.\r\n\r\nAny element/component could be projected.\r\n\r\n```html\r\n<div *kitOverlay=\"display\">\r\n  Some content\r\n</div>\r\n```\r\n\r\n`*kitOverlay` - expects a boolean expression, like `*ngIf`.\r\n\r\n### Positioning\r\n\r\nIf base example `<div>` just would be projected to `<kit-overlay-host>`. You can use css for positioning.\r\n\r\n```html\r\n<div *kitOverlay=\"display\" style=\"position: fixed; top: 100px; left: 50%; transform: translateX(-50%)\">\r\n  Some content\r\n</div>\r\n```\r\n\r\nUse `KitOverlayPositionService` for more advanced cases.\r\n\r\n`kitOverlayPosition` just provides `KitOverlayPositionService` on element and pass params.\r\n\r\n```html\r\n<button #anchor>Dropdown toggle</button>\r\n<div *kitOverlay=\"display\" [kitOverlayPosition]=\"{type: 'dropdown', anchor: anchor}\">\r\n  <ul>\r\n    <li>Item1</li>\r\n    <li>Item2</li>\r\n    <li>Item3</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\nOr provide `KitOverlayPositionService` on component. Also needs `KitStyleService` for applying styles.\r\n\r\n```ts\r\n@Component({\r\n  selector: 'app-popup',\r\n  providers: ['KitOverlayPositionService', 'KitStyleService'],\r\n  ...\r\n})\r\nexport class AppPopupComponent {\r\n  constructor(private overlayPosition: KitOverlayPositionService) {\r\n  }\r\n  \r\n  ngOnChanges() {\r\n    this.overlayPosition.type = 'side';\r\n    this.overlayPosition.anchor = this.anchor;\r\n    ...\r\n  }\r\n...\r\n```\r\n\r\n```html\r\n<button (click)=\"display = true\" #anchor>Show popup</button>\r\n<app-popup *kitOverlay=\"display\" [anchor]=\"anchor\">\r\n  Popup content\r\n</app-popup>\r\n``` \r\n\r\n#### `type`\r\n\r\n* `dropdown`\r\n* `side`\r\n\r\n#### `position`\r\n\r\n* `top`\r\n* `bottom`\r\n* `left`\r\n* `right`\r\n* `top-left`\r\n* `top-right`\r\n* `bottom-left`\r\n* `bottom-right`\r\n* `left-top`\r\n* `left-bottom`\r\n* `right-top`\r\n* `right-bottom`\r\n\r\n\r\n## Examples\r\n\r\n* ui-base:custom-select - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-custom-select), [demo](http://ngx-kit.com/ui-base/module/ui-custom-select) \r\n* ui-base:modal - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-modal), [demo](http://ngx-kit.com/ui-base/module/ui-modal) \r\n* ui-base:tooltip - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-tooltip), [demo](http://ngx-kit.com/ui-base/module/ui-tooltip) \r\n"}],"demo":[]},{"name":"kit-pointer","api":[{"class":"KitPointerLineDirective","type":"Directive","selector":"[kitPointerLine]","doc":null,"inputs":[{"name":"kitPointerLine","type":"VoidKeyword","doc":null}],"outputs":[{"name":"move","type":["KitPointerLineMoveEvent"],"doc":null},{"name":"start","type":["VoidKeyword"],"doc":null},{"name":"stop","type":["VoidKeyword"],"doc":null}],"methods":[{"name":"clickHandler","params":[{"name":"event","type":"MouseEvent"}],"doc":null},{"name":"mousedownHandler","params":[{"name":"event","type":"MouseEvent"}],"doc":null}],"props":[{"name":"kitPointerLine","type":"VoidKeyword","doc":null},{"name":"move","doc":null},{"name":"start","doc":null},{"name":"stop","doc":null}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Pointer\r\n\r\n## Main purpose\r\n \r\n* input sliders\r\n\r\n## Features\r\n\r\n* handle point moving by mouse on line\r\n\r\n## Examples\r\n\r\n* ui-base:slider - [sources](https://github.com/ngx-kit/ui-base/tree/master/package/lib/kit-slider), [demo](http://ngx-kit.com/ui-base/module/kit-slider)\r\n"}],"demo":[]},{"name":"kit-slide","api":[{"class":"KitSlideHostService","type":"Injectable","selector":"","doc":null,"inputs":[],"outputs":[],"methods":[{"name":"addId","params":[{"name":"id","type":"KitSlideId"}],"doc":{"comment":"Register slide.","tags":[{"name":"publicApi","value":""}]}},{"name":"deleteId","params":[{"name":"id","type":"KitSlideId"}],"doc":{"comment":"Delete slide.","tags":[{"name":"publicApi","value":""}]}},{"name":"genId","type":"NumberKeyword","params":[],"doc":{"comment":"Generate slide id.","tags":[{"name":"publicApi","value":""}]}},{"name":"next","params":[],"doc":{"comment":"Activate next slide.","tags":[{"name":"publicApi","value":""}]}},{"name":"prev","params":[],"doc":{"comment":"Activate prev slide.","tags":[{"name":"publicApi","value":""}]}},{"name":"rotate","params":[],"doc":{"comment":"Activate next item or first.","tags":[{"name":"publicApi","value":""}]}}],"props":[{"name":"activateFirst","doc":{"comment":"Activate first slide on init.","tags":[{"name":"publicApi","value":""}]}}],"getProps":[{"name":"active","type":"KitSlideId","doc":{"comment":"Get active slide id.","tags":[{"name":"publicApi","value":""}]}},{"name":"active$","type":{"type":"Observable","args":["KitSlideId"]},"doc":{"comment":"Get `Observable` with active slide id.","tags":[{"name":"publicApi","value":""}]}},{"name":"direction$","type":{"type":"Observable","args":["KitSlideDirection"]},"doc":{"comment":"Get `Observable` with direction of slide changing (next, prev).","tags":[{"name":"publicApi","value":""}]}}],"setProps":[{"name":"active","params":[{"name":"id","type":"KitSlideId"}],"doc":{"comment":"Set active side by id.","tags":[{"name":"publicApi","value":""}]}}]},{"class":"KitSlideDirective","type":"Directive","selector":"[kitSlide]","doc":{"comment":"Structure directive that display slides.","tags":[]},"inputs":[{"name":"kitSlide","type":"KitSlideId","default":null,"doc":{"comment":"Slide id.\r\n\r\nIf not set will be generated automatically.","tags":[]}}],"outputs":[],"methods":[{"name":"ngOnChanges","params":[{"name":"changes","type":"SimpleChanges"}],"doc":null},{"name":"ngOnDestroy","params":[],"doc":null},{"name":"ngOnInit","params":[],"doc":null}],"props":[{"name":"kitSlide","type":"KitSlideId","doc":{"comment":"Slide id.\r\n\r\nIf not set will be generated automatically.","tags":[]}}],"getProps":[],"setProps":[]}],"docs":[{"name":"README","meta":{},"content":"# Slide\r\n\r\n## Main purpose\r\n \r\n* carousel, image slider\r\n* tabs component\r\n\r\n## Features\r\n\r\n* handle state by services\r\n* use structural directive (no render if template is not displayed)\r\n* handle animation state (direction)\r\n* rotate api\r\n\r\n## Usage\r\n\r\nProvide `KitSlideHostService` on a component and add `*kitSlide` to slides.\r\n\r\n```html\r\n<div (click)=\"rotate()\">\r\n  <div *kitSlide>Slide 1</div>\r\n  <div *kitSlide>Slide 2</div>\r\n  <div *kitSlide>Slide 3</div>\r\n</div>\r\n``` \r\n\r\nUse `KitSlideHostService` for state changing.\r\n\r\n```typescript\r\nproviders[KitSlideHostService],\r\n...\r\nconstructor(private slideHost: KitSlideHostService) {\r\n}\r\n...\r\nrotate() {\r\n  this.slideHost.rotate();\r\n}\r\n``` \r\n\r\n## Examples\r\n\r\n* ui-base:carousel - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-carousel), [demo](http://ngx-kit.com/ui-base/module/ui-carousel)\r\n* ui-base:tabs - [sources](https://github.com/ngx-kit/ui-base/tree/master/src/lib/ui-tabs), [demo](http://ngx-kit.com/ui-base/module/ui-tabs) \r\n"}],"demo":[]}]}